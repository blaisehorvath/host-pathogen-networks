#
# This YAML file configures the build_layer.py file that can build the whole layer 0 of a signalink project
#
# Building the database dictionary
# --------------------------------
#
# The first job is to create a databse that can be used to map every non uniprot accession id to an up to date
# uniprot accession if possible. This database is built by a node.js script. (see requirements in prior script)
#
# -----------------
# Building layer 0
# -----------------
#
# The YAML directs the workflow, first the raw files, that were downloaded and gatherd are parsed to MiTab
# formatted SQlite files. The second process is the mapping (if needed), where the every non uniprot
# node main accession is mapped to a swissprot id (if possible). And the third and final step is the
# merging of the .db files that contain uniprot accessions.
#
# Parsing:
# --------
# Databases property is a map that contains the databaste es that will be parsed from raw database files.
# In this map the keys represent database names. Each database have a script and an arguments property.
# The script property holds the location of the file that parses the database's raw file(s).
# The arguments property hold's a map where each element is an argument.
#
# Each database has the following arguments:
#    destination: the relative or absolute path (with file name) where the created .db Mitab-SQL file should be stored
#    sql_seed_file: an sql script that is the base of the Mitab-SQL schema
#    sqlite_db_api: a python class that can be initiated with the SQL script above, the .db files are created with this class
#
#
# Mapping:
# --------
# Properties(new):
#   mapper_script: The script that does the mapping
#   dictionary_db_file: SQLite database that is tha base of the mapping process, it is created by the
#   dictionary builder script. (/DATA/dictionary_builder)
#
# Merging:
# --------
# Properites(new):
#   merger_script: The script that does the merging
#
---
  parser:
    needed_packages:
      sqlite_db_api: lib/SQLiteDBApi
    databases:
      acsn:
        script: databases/acsn/script.py
        arguments:
          argument_1: "asdasdasad"
          argument_2: "adasdasder"

  mapper:
    mapper_script: mapper/map_to_uniprot.py
    sqlite_db_api: lib/SQLiteDBApi/
    dictionary_db_file: ../../dictionary_builder/dictionary.db
    databases:
      database1_name:
        source: output/database1/database_1.db
        destination: output/database_1_mapped.db
      database2_name:
        source: output/database1/database_2.db
        destination: output/database_2_mapped.db

  merger:
    merger_script: merger/merge_layer.py
    sqlite_db_api: lib/SQLiteDBApi/
    destination: output/merged_layers.db
    source_files:
     - output/database_1_mapped.db
     - output/database_2_mapped.db